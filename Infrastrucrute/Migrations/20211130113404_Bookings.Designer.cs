// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211130113404_Bookings")]
    partial class Bookings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.WorkingPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumPlace")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkingPlaces");
                });

            modelBuilder.Entity("Dоmain.Models.MeetingOptionalParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OptionalParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("OptionalParticipantId");

                    b.ToTable("MeetingOptionalParticipant");
                });

            modelBuilder.Entity("Dоmain.Models.MeetingRequiredParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequiredParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("RequiredParticipantId");

                    b.ToTable("MeetingRequiredParticipant");
                });

            modelBuilder.Entity("Dоmain.Models.MeetingRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<Guid?>("MeetingOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeetingTheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MeetingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MeetingOwnerId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("Dоmain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Dоmain.Models.WorkingPlaceBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookingDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkingPlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkingPlaceId");

                    b.ToTable("WorkingPlaceBookings");
                });

            modelBuilder.Entity("Dоmain.Models.MeetingOptionalParticipant", b =>
                {
                    b.HasOne("Dоmain.Models.MeetingRoom", "Meeting")
                        .WithMany("MeetingOptionalParticipants")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Dоmain.Models.User", "OptionalParticipant")
                        .WithMany("MeetingOptionalParticipant")
                        .HasForeignKey("OptionalParticipantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Meeting");

                    b.Navigation("OptionalParticipant");
                });

            modelBuilder.Entity("Dоmain.Models.MeetingRequiredParticipant", b =>
                {
                    b.HasOne("Dоmain.Models.MeetingRoom", "Meeting")
                        .WithMany("MeetingRequiredParticipants")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Dоmain.Models.User", "RequiredParticipant")
                        .WithMany("MeetingRequiredParticipants")
                        .HasForeignKey("RequiredParticipantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Meeting");

                    b.Navigation("RequiredParticipant");
                });

            modelBuilder.Entity("Dоmain.Models.MeetingRoom", b =>
                {
                    b.HasOne("Dоmain.Models.User", "MeetingOwner")
                        .WithMany("BookerMeetings")
                        .HasForeignKey("MeetingOwnerId");

                    b.Navigation("MeetingOwner");
                });

            modelBuilder.Entity("Dоmain.Models.WorkingPlaceBooking", b =>
                {
                    b.HasOne("Dоmain.Models.User", "User")
                        .WithMany("WorkingPlaceBookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.WorkingPlace", "WorkingPlace")
                        .WithMany("WorkingPlaceBookings")
                        .HasForeignKey("WorkingPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkingPlace");
                });

            modelBuilder.Entity("Domain.Models.WorkingPlace", b =>
                {
                    b.Navigation("WorkingPlaceBookings");
                });

            modelBuilder.Entity("Dоmain.Models.MeetingRoom", b =>
                {
                    b.Navigation("MeetingOptionalParticipants");

                    b.Navigation("MeetingRequiredParticipants");
                });

            modelBuilder.Entity("Dоmain.Models.User", b =>
                {
                    b.Navigation("BookerMeetings");

                    b.Navigation("MeetingOptionalParticipant");

                    b.Navigation("MeetingRequiredParticipants");

                    b.Navigation("WorkingPlaceBookings");
                });
#pragma warning restore 612, 618
        }
    }
}
